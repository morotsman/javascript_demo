(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(factory);
  } else {
    // Browser globals.
    root.animator = factory();
  }
}(this, function() {/**
 * @license almond 0.3.0 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../bower_components/almond/almond", function(){});

define('util',[],function() {
    return {
        getOrDefault: function(value, defaultValue) {
            return value === undefined ? defaultValue : value;
        }
    };

});

define('Renderer',["util"], function(util) {

    return function(context, canvas) {
        var requestAnimationFrame = window.requestAnimationFram ||
                window.mozRequestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.msRequestAnimationFrame;

        var cancelAnimationFrame = window.cancelAnimationFram ||
                window.mozCancelAnimationFrame ||
                window.webkitCancelAnimationFrame ||
                window.msCancelAnimationFrame;

        var requestId;
        var timeFromStart;

        this.apply = function(timeFromStart, animation) {
            var properties = animation.getSettings();
            var lastTickProperties = animation.lastTickProperties ? animation.lastTickProperties : properties;
            var modifiedProperties = properties;
            for (var i = 0; i < animation.runtimeEffects.length; i++) {
                modifiedProperties = animation.runtimeEffects[i](modifiedProperties, timeFromStart, lastTickProperties);
            }
            animation.lastTickProperties = modifiedProperties;

            return modifiedProperties;
        };

        this.createRuntimeAnimations = function(animations) {

            var result = new Array();

            for (var i = 0; i < animations.length; i++) {
                var elements = animations[i].textStream.foldLeft(new Array(), function(acc, element) {
                    var copyOfElement = element.copy();

                    copyOfElement.runtimeEffects = element.getEffects().foldLeft(new Array(), function(acc, effect) {
                        acc.push(effect());
                        return acc;

                    });

                    acc.push(copyOfElement);
                    return acc;
                });
                result.push(elements);

            }


            return result;
        };

        this.stop = function() {
            cancelAnimationFrame(requestId);
            context.clearRect(0, 0, canvas.width, canvas.height);
            return util.getOrDefault(timeFromStart, 0);//TODO fix, this will cause an error, each animation must have it's own
        };


        var render = function(prop) {
            context.save();
            context.font = Math.floor(prop.scale * prop.fontSize) + "px " + prop.font;
            context.fillStyle = "rgba(" + prop.rgba.red + "," + prop.rgba.green + "," + prop.rgba.blue + ", " + Math.floor(prop.alpha) + ")";

            if (prop.angle !== 0) {
                context.translate(Math.floor(prop.x), Math.floor(prop.y));
                context.rotate(prop.angle * Math.PI / 180);
            } else {
                context.translate(Math.floor(prop.x), Math.floor(prop.y));
            }

            context.fillText(prop.subject, 0, 0);

            context.restore();
        };


        this.start = function(animations, startTime) {
            var that = this;
            var runtimeAnimations = this.createRuntimeAnimations(animations);
            var timeFromStart;
            var stopTimes = [];

            for (var i = 0; i < animations.length; i++) {
                var stopTime = animations[i].textStream.foldLeft(0, function(acc, animation) {
                    return Math.max(acc, animation.getStopTime());
                });
                console.log(stopTime);
                stopTimes.push(stopTime);
            }



            var runner = function(now) {
                startTime = startTime === undefined ? new Date().getTime() : startTime;
                timeFromStart = now - startTime;
                
                context.clearRect(0, 0, canvas.width, canvas.height);
                for (var i = 0; i < runtimeAnimations.length; i++) {                   
                    for (var j = 0; j < runtimeAnimations[i].length; j++) {
                        var animation = runtimeAnimations[i][j];
                        if ((timeFromStart < animation.getStopTime()) && timeFromStart > animation.getStartTime()) {
                            var prop = that.apply(timeFromStart, animation);
                            render(prop);
                        }
                    }
                    //handle loop
                    if ((timeFromStart > stopTimes[i])) {

                        runtimeAnimations.splice(i, 1);
                        stopTimes.splice(i, 1);
                        console.log("Removing: " + i + " " + timeFromStart + " " + stopTimes[i]);


                        if (runtimeAnimations.length === 0) {
                            return;
                        }
                    }
                }

                requestId = requestAnimationFrame(runner);
            };
            requestId = requestAnimationFrame(runner);
        };


    }
});

define('list',[],function() {

    var list = function(_source) {

        function ArrayList() {
            var cons = function(head, tail) {
                var result = new ArrayList();
                result._head = head;
                result._tail = tail;
                result.isEmpty = false;
                result.head = function() {
                    return result._head;
                };
                result.tail = function() {
                    return result._tail;
                };
                return result;
            };

            var empty = function() {
                var result = new ArrayList();
                result.head = function() {
                    throw "head on empty";
                };
                result.tail = function() {
                    throw "tail on empty";
                };
                result.isEmpty = true;
                return result;
            };

            this.init = function(a) {
                //console.log("init");
                if (a.length === 0) {
                    return empty();
                } else {
                    return cons(a[0], this.init(a.splice(1)));
                }
            };

            this.forEach = function(fun) {
                if (this.isEmpty) {
                    return;
                } else {
                    fun(this.head());
                    this.tail().forEach(fun);
                }
            };

            this.filter = function(predicate) {
                if (this.isEmpty) {
                    return empty();
                } else {
                    var that = this;
                    if (predicate(this.head())) {
                        return cons(this.head(), that.tail().filter(predicate));
                    } else {
                        return that.tail().filter(predicate);
                    }
                }
            };

            this.toArray = function() {
                var loop = function(s, acc) {
                    if (s.isEmpty) {
                        return acc;
                    } else {
                        acc.push(s.head());
                        return loop(s.tail(), acc);
                    }

                };

                return loop(this, new Array());
            };


            this.foldLeft = function(initial, fun) {
                if (this.isEmpty) {
                    return initial;
                } else {
                    return this.tail().foldLeft(fun(initial, this.head()), fun);
                }
            };

            this.foldRight = function(initial, fun) {
                if (this.isEmpty) {
                    return initial;
                } else {
                    return fun(this.tail().foldRight(initial, fun), this.head());
                }
            };

            this.Cons = function(head) {
                return cons(head, this);
            };

            this.length = function() {
                if (this.isEmpty) {
                    return 0;
                } else {
                    return 1 + this.tail().length();
                }
            };

        }
        ;

        var result = new ArrayList();
        return result.init(_source);


    };

    return list;
});

define('effects',["util"], function(util) {

    var Effects = function() {
        var linearImpl = function(property, settings) {
            return function() {
                return function(properties, timeFromStart) {
                    if (settings.startTime > timeFromStart) {
                        return properties;
                    }
                    if (timeFromStart > (settings.startTime + settings.duration)) {
                        timeFromStart = settings.startTime + settings.duration;
                    }
                    var change = settings.change * ((timeFromStart - settings.startTime) / (settings.duration));
                    properties[property] = properties[property] + change;
                    return properties;
                };
            };

        };

        var staticImpl = function(property, settings) {
            return function() {
                return function(properties, timeFromStart) {
                    if (settings.startTime > timeFromStart) {
                        return properties;
                    }
                    return properties;
                };
            };
        };

        var cosOrSin = function(property, settings, fun) {
            return function() {
                return function(properties, timeFromStart) {
                    if (settings.startTime > timeFromStart) {
                        return properties;
                    }
                    if (timeFromStart > (settings.startTime + settings.duration)) {
                        timeFromStart = settings.startTime + settings.duration;
                    }
                    var scale = settings.period / (2 * Math.PI);
                    var time = (timeFromStart - settings.startTime);
                    var position = fun(time / scale);
                    var change = settings.change * position;

                    properties[property] = properties[property] + change;
                    return properties;
                };
            };
        };

        var sinImpl = function(property, settings) {
            return cosOrSin(property, settings, Math.sin);
        };

        var cosImpl = function(property, settings) {
            return cosOrSin(property, settings, Math.cos);
        };


        var getFallDistance = function(gravity, initialVelocity, time) {
            return initialVelocity * time + 0.5 * gravity * Math.pow(time, 2);
        };

        var impactVelocity = function(initialHeight, gravity) {
            return Math.sqrt(2 * gravity * initialHeight);
        };

        var maxHeight = function(gravity, initialVelocity) {
            return Math.pow(initialVelocity, 2) / (2 * gravity);
        };


        var fallImpl = function(property, settings) {
            return function() {
                var gravity = util.getOrDefault(settings.gravity, 9.81);
                var speed = util.getOrDefault(settings.speed, 1);
                var cor = util.getOrDefault(settings.cor, 0.5);
                var initialVelocity = util.getOrDefault(settings.initialVelocity, 0);
                var fallHeight = settings.change + maxHeight(gravity, initialVelocity);
                var initialTime = settings.startTime;
                var intialPosition;
                var stop = false;
                var ground;
                var prevFallDistance = 0;

                return function(properties, timeFromStart) {
                    if (settings.startTime > timeFromStart) {
                        return properties;
                    }
                    intialPosition = util.getOrDefault(intialPosition, properties[property]);
                    ground = util.getOrDefault(ground, intialPosition + settings.change);
                    if (stop || timeFromStart > (settings.startTime + settings.duration)) {
                        timeFromStart = settings.startTime + settings.duration;
                        properties[property] = settings.change + properties[property];
                        return properties;
                    }

                    var time = (timeFromStart - initialTime) / 1000 * speed;
                    var fallDistance = getFallDistance(gravity, initialVelocity, time);
                    properties[property] = intialPosition + fallDistance;

                    if (properties[property] > ground) {
                        initialVelocity = -cor * impactVelocity(fallHeight, gravity);
                        fallHeight = maxHeight(gravity, initialVelocity);
                        initialTime = timeFromStart;
                        intialPosition = ground;

                        if (Math.abs(initialVelocity) < 1) {//to avoid flickering
                            stop = true;
                        }

                    }

                    return properties;
                };
            };

        };
        
        var availableEffects = {
            fall: fallImpl,
            sin: sinImpl,
            cos: cosImpl,
            static: staticImpl,
            linear: linearImpl
        };        
        
        this.getEffect = function(effectName){
            return util.getOrDefault(availableEffects[effectName], linearImpl);
        }
    };
    return new Effects();

});
define('TextAnimation',["util", "list", "effects"], function(util, List, effetcImpls) {

    var TextAnimation = function(_config) {

        var effects = util.getOrDefault(_config.effects, new List([]));
        var subject = util.getOrDefault(_config.subject, "");
        var x = util.getOrDefault(_config.x, 0);
        var y = util.getOrDefault(_config.y, 0);
        var font = util.getOrDefault(_config.font, "Arial");
        var fontSize = util.getOrDefault(_config.fontSize, 25);
        var alpha = util.getOrDefault(_config.alpha, 1);
        var startTime = util.getOrDefault(_config.startTime, Number.MAX_VALUE);
        var duration = util.getOrDefault(_config.duration, 0);
        var stopTime = util.getOrDefault(_config.stopTime, 0);
        var scale = util.getOrDefault(_config.scale, 1);
        var angle = util.getOrDefault(_config.angle, 0);
        var rgba = util.getOrDefault(_config.rgba, {red: 0, green: 0, blue: 0});

        var copyConfig = function() {
            return {
                effects: effects,
                subject: subject,
                x: x,
                y: y,
                font: font,
                fontSize: fontSize,
                alpha: alpha,
                startTime: startTime,
                stopTime: stopTime,
                scale: scale,
                duration: duration,
                angle: angle,
                rgba: rgba
            };
        };


        //remove
        this.getSettings = function() {
            return copyConfig();
        };

        this.rgba = function(rgba) {
            var copyOfConfig = copyConfig();
            copyOfConfig.rgba = rgba;
            return new TextAnimation(copyOfConfig);
        };

        this.angle = function(angle) {
            var copyOfConfig = copyConfig();
            copyOfConfig.angle = angle;
            return new TextAnimation(copyOfConfig);
        };

        this.font = function(font) {
            var copyOfConfig = copyConfig();
            copyOfConfig.font = font;
            return new TextAnimation(copyOfConfig);
        };

        this.fontSize = function(fontSize) {
            var copyOfConfig = copyConfig();
            copyOfConfig.fontSize = fontSize;
            return new TextAnimation(copyOfConfig);
        };

        this.alpha = function(alpha) {
            var copyOfConfig = copyConfig();
            copyOfConfig.alpha = alpha;
            return new TextAnimation(copyOfConfig);
        };

        this.x = function(x) {
            var copyOfConfig = copyConfig();
            copyOfConfig.x = x;
            return new TextAnimation(copyOfConfig);
        };

        this.y = function(y) {
            var copyOfConfig = copyConfig();
            copyOfConfig.y = y;
            return new TextAnimation(copyOfConfig);
        };

        this.subject = function(subject) {
            var copyOfConfig = copyConfig();
            copyOfConfig.subject = subject;
            return new TextAnimation(copyOfConfig);
        };



        var mapImpl = function(settings, fun) {
            return function() {
                return function(properties, timeFromStart, lastTickProperties) {
                    if (settings.startTime > timeFromStart) {
                        return properties;
                    }
                    if (timeFromStart > (settings.startTime + settings.duration)) {
                        timeFromStart = settings.startTime + settings.duration;
                    }
                    return fun(properties, settings, timeFromStart, lastTickProperties);
                };
            };
        };

        var effect = function(property, settings, fun) {
            var selectedEffect = effetcImpls.getEffect(settings.effectName);
            var copyOfConfig = copyConfig();
            copyOfConfig.effects = effects.Cons(selectedEffect(property, settings, fun));
            copyOfConfig.startTime = Math.min(copyOfConfig.startTime, settings.startTime);
            copyOfConfig.stopTime = Math.max(copyOfConfig.stopTime, settings.startTime + settings.duration);
            copyOfConfig.startTrigger = settings.startTrigger;
            return new TextAnimation(copyOfConfig);
        };



        this.fade = function(settings) {
            return effect("alpha", settings);
        };


        this.scale = function(settings) {
            return effect("scale", settings);
        };

        this.map = function(settings, fun) {
            var startTime = settings.startTime;
            var duration = settings.duration;
            var copyOfConfig = copyConfig();
            copyOfConfig.effects = effects.Cons(mapImpl(settings, fun));
            copyOfConfig.startTime = Math.min(copyOfConfig.startTime, startTime);
            copyOfConfig.stopTime = Math.max(copyOfConfig.stopTime, startTime + duration);
            return new TextAnimation(copyOfConfig);
        };

        this.scrollX = function(settings) {
            return effect("x", settings);
        };

        this.rotate = function(settings) {
            return effect("angle", settings);
        };

        this.scrollY = function(settings) {
            return effect("y", settings);
        };

        this.static = function(settings) {
            settings.effectName = "static";
            return effect(undefined, settings);
        };


        this.getStartTime = function() {
            return startTime;
        };

        this.getStopTime = function() {
            return stopTime;
        };

        this.getDuration = function() {
            return duration;
        };

        this.getEffects = function() {
            return effects;
        };

        this.copy = function() {
            var copyOfConfig = copyConfig();
            return new TextAnimation(copyOfConfig);
        };
    };
    
    return TextAnimation;
});
define('TextStream',["TextAnimation"], function(TextAnimation) {
    
    var lazy = function(fun) {
            var parameters = [].splice.call(arguments, 1);

            return function() {
                var args = parameters.concat([].slice.call(arguments, 0));
                return fun.apply(fun, args);
            };
        };
        
    var isFunction =  function(obj) {
            return !!(obj && obj.constructor && obj.call && obj.apply);
        };    
    
    function StreamImpl() {

        this.generate = function(seed, fun) {
            var loop = function(seed, index) {
                return new Cons(new TextAnimation({subject: seed}), lazy(function() {
                    return loop(fun(seed, index), index + 1);
                }));
            };

            return loop(seed, 0);
        };

        this.generateFromStream = function(stream, fun) {
            var loop = function(stream, index) {
                return new Cons(stream.head(), lazy(function() {
                    return loop(fun(stream, index), index + 1);
                }));
            };

            return loop(stream, 0);
        };


        this._map = function(fun, index) {
            if (this.isEmpty()) {
                return this;
            } else {
                var that = this;
                return new Cons(fun(this.head(), index), lazy(function() {
                    return that.tail()._map(fun, index + 1);
                }));
            }
        };

        this.take = function(number) {
            if (this.isEmpty() || number <= 0) {
                return this;
            } else if (number === 1) {
                return new Cons(this.head(), lazy(function() {
                    return new Empty();
                }));
            } else {
                var that = this;
                return new Cons(this.head(), lazy(function() {
                    return that.tail().take(number - 1);
                }));
            }
        };

        this.takeWhile = function(predicate) {
            if (this.isEmpty() || !predicate(this.head())) {
                return this;
            } else {
                var that = this;
                return new Cons(this.head(), lazy(function() {
                    return that.tail().takeWhile(predicate);
                }));
            }
        };

        this._filter = function(predicate, index) {
            if (this.isEmpty()) {
                return this;
            } else {
                var that = this;
                if (predicate(this.head(), index)) {
                    return new Cons(this.head(), lazy(function() {
                        return that.tail()._filter(predicate, index + 1);
                    }));
                } else {
                    return that.tail()._filter(predicate, index + 1);
                }
            }
        };

        this.foldLeft = function(initial, fun) {
            if (this.isEmpty()) {
                return initial;
            } else {
                return this.tail().foldLeft(fun(initial, this.head()), fun);
            }
        };

        this.foldRight = function(initial, fun) {
            if (this.isEmpty()) {
                return initial;
            } else {
                return fun(this.tail().foldRight(initial, fun), this.head());
            }
        };

        this._forEach = function(fun, index) {
            if (this.isEmpty()) {
                return;
            } else {
                fun(this.head(), index);
                this.tail()._forEach(fun, index + 1);
            }
        };

        this.zip = function(stream) {
            if (this.isEmpty() || stream.isEmpty()) {
                return this;
            } else {
                var that = this;
                return new Cons({one: this.head(), two: stream.head()}, lazy(function() {
                    return that.tail().zip(stream.tail());
                }));
            }
        };

        this.toArray = function() {
            var loop = function(s, acc) {
                if (s.isEmpty()) {
                    return acc;
                } else {
                    acc.push(s.head());
                    return loop(s.tail(), acc);
                }

            };

            return loop(this, new Array());
        };

        var getPositions = function(letters, settings) {
            var canvas = document.createElement('canvas');
            canvas.width = 0;
            canvas.height = 0;
            var ctx = canvas.getContext("2d");
            ctx.font = Math.floor(settings.scale * settings.fontSize) + "px " + settings.font;

            var result = [0];
            var position = 0;
            for (var i = 0; i < letters.length; i++) {
                var width = ctx.measureText(letters[i]).width;
                position = position + width;
                result.push(position);
            }

            return result;
        };

        this.split = function(fun) {
            if (this.isEmpty()) {
                return this;
            }

            var that = this;
            var subject = this.head().getSettings().subject;
            var letters = fun === undefined ? subject.split('') : fun(subject);
            var positions = getPositions(letters, this.head().getSettings());
            var loop = function(head, index) {
                var settings = head.getSettings();
                settings.subject = letters[index];
                settings.x = settings.x + positions[index];
                if (letters.length - 1 === index) {
                    return new Cons(new TextAnimation(settings), lazy(function() {
                        return that.tail().split(fun);
                    }));
                }
                return new Cons(new TextAnimation(settings), lazy(function() {
                    return loop(head, index + 1);
                }));
            };
            return loop(this.head(), 0);
        };

        this.cons = function(head) {
            return new Cons(new TextAnimation({subject: head}), this);
        };
        
        
        this.scrollY = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation
                        .scrollY(settings);
            }, 0);
        };

        this.static = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation.static(settings);
            }, 0);
        };

        this.scrollX = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation.scrollX(settings);
            }, 0);
        };
        
        this.rotate = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation.rotate(settings);
            }, 0);
        }; 
        
        this.fade = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation.fade(settings);
            }, 0);
        };    
        
        this.scale = function(settings) {
            if (this.isEmpty()) {
                return this;
            }            
            return this._map(function(animation) {
                return animation.scale(settings);
            }, 0);
        }; 
        
        this.effect = function(settings, fun){
            if (this.isEmpty()) {
                return this;
            } 
            return this._map(function(animation) {
                return animation.map(settings, fun);
            }, 0);
        };

    }
    ;

    function Cons(_head, _tail) {
        var theHead = _head;
        var theTail = _tail;

        this.head = function() {
            return theHead;
        };
        this.tail = function() {
            if (isFunction(theTail)) {
                theTail = theTail();
            }
            return theTail;
        };

        this.isEmpty = function() {
            return false;
        };

        this.map = function(fun) {
            return this._map(fun, 0);
        };

        this.filter = function(predicate) {
            return this._filter(predicate, 0);
        };

        this.forEach = function(fun) {
            return this._forEach(fun, 0);
        };

        
        
    }
    ;
    //inherit from StreamImpl
    Cons.prototype = new StreamImpl();

    /*
     * Represents the empty Stream.
     */
    function Empty() {
        this.head = function() {
            throw "head on empty";
        };

        this.tail = function() {
            throw "tail on empty";
        };

        this.isEmpty = function() {
            return true;
        };

        this.map = function(fun) {
            return this._map(fun, 0);
        };

        this.filter = function(predicate) {
            return this._filter(predicate, 0);
        };

        this.forEach = function(fun) {
            return this._forEach(fun, 0);
        };

           
    }
    ;

    //inherit from StreamImpl
    Empty.prototype = new StreamImpl();

    function Stream() {

        var init = function(source) {
            if (source === undefined || source.length === 0) {
                return new Empty();
            } else {
                return new Cons(new TextAnimation({subject: source[0]}), lazy(function() {
                    return init(source.splice(1));
                }));
            }
        };


        return init(Array.prototype.slice.call(arguments, 0));
    }
    
    return Stream;
});

define('animator',["Renderer", "TextStream"], function(Renderer, Stream) {


    return {
        textStream: Stream,
        animator: Renderer
    };

});



require(["animator"], function (animator) {
    console.log("hello world");
    
    
});
define("main", function(){});


  // Use almond's special top level synchronous require to trigger factory
  // functions, get the final module, and export it as the public api.
  return require('animator');
}));